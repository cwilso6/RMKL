status[fi]= FALSE
table(status)
Surv_data=data.frame(x1 = X[,1], x2 = X[,2], time = time, status = status, f.true = f.true)
plotlist = list()
plotlist[[1]] = ggplot(Surv_data, aes(x = x1, y = x2, color = f.true)) + geom_point() +
scale_color_gradient(low = 'blue', high = 'yellow') +
labs(color = 'value', title = 'True',x = expression(x[1]), y = expression(x[2])) + theme_bw() +
theme(plot.title = element_text(hjust = .5), legend.position = 'bottom')
#Cox model
fit=coxph(Surv(Surv_data$time, Surv_data$status) ~ Surv_data$x1 + Surv_data$x2, method = "breslow")
fit2 <- step(fit, direction='both', k = log(dim(Surv_data)[1]))
cox_pred=predict(fit, as.data.frame(Surv_data[,1:2]))
summary(fit)$concordance[1]
Surv_data$Cox = cox_pred
plotlist[[2]] = ggplot(Surv_data, aes(x = x1, y = x2, color = Cox)) + geom_point() +
scale_color_gradient(low = 'blue', high = 'yellow') +
labs(x = expression(x[1]), y = expression(x[2]), color = 'value', title = 'Cox') + theme_bw() +
theme(plot.title = element_text(hjust = .5), legend.position = 'bottom')
#Gradient Boosting
gbm1 <- gbm(Surv(time, status) ~ x1 + x2,       # formula
data=Surv_data,                 # dataset
distribution="coxph",
n.trees=1000,              # number of trees
shrinkage=0.005,           # shrinkage or learning rate, 0.001 to 0.1 usually work
interaction.depth=1,       # 1: additive model, 2: two-way interactions, etc
bag.fraction = 0.5,        # subsampling fraction, 0.5 is probably best
train.fraction = 0.8,      # fraction of data for training, first train.fraction*N used for training
cv.folds = 5,              # do 5-fold cross-validation
verbose = F)           #  print progress
summary(gbm1)
best.iter <- gbm.perf(gbm1,method = "cv")
gpred2=predict(gbm1,Surv_data,best.iter)
Surv_data$GBM = gpred2
plotlist[[3]] = ggplot(Surv_data, aes(x = x1, y = x2, color = GBM)) + geom_point() +
scale_color_gradient(low = 'blue', high = 'yellow') +
labs(x = expression(x[1]), y = expression(x[2]), color = 'value', title = 'GBCox') +
theme_bw() + theme(plot.title = element_text(hjust = .5), axis.title.y = element_text(angle = 0, vjust = .5),
legend.position = 'bottom')
gbm.con = survConcordance(Surv(time, status) ~ GBM, Surv_data)$con
gbm.con
#Random Survival Forest
modrf <-  rfsrc(Surv(time, status) ~ x1 + x2, data = Surv_data, nsplit = 10)
prerf <- predict(modrf, Surv_data, outcome = 'test')$predicted.oob
Surv_data$RSF = prerf
plotlist[[4]] = ggplot(Surv_data, aes(x = x1, y = x2, color = RSF)) + geom_point() +
scale_color_gradient(low = 'blue', high = 'yellow') +
labs(x = expression(x[1]), y = expression(x[2]), color = 'value', title = 'RSF') + theme_bw() +
theme(plot.title = element_text(hjust = .5), axis.title.y = element_text(angle = 0, vjust = .5),
legend.position = 'bottom')
RSF.con = survConcordance(Surv(time, status) ~ RSF, Surv_data)$con
RSF.con
### Run ELM model
modelm <- ELMCox(Surv_data[,1:2], Surv(Surv_data$time, Surv_data$status))
ypreelm <- predict(modelm, Surv_data[,1:2])
Surv_data$ELM =  ypreelm
survConcordance(Surv(time, status) ~ ELM,data = Surv_data)$con
plotlist[[5]] = ggplot(Surv_data, aes(x = x1, y = x2, color = ELM)) + geom_point() +
scale_color_gradient(low = 'blue', high = 'yellow') +
labs(x = expression(x[1]), y = expression(x[2]), color = 'value', title = 'ELM') +
theme_bw() + theme(plot.title = element_text(hjust = .5), axis.title.y = element_text(angle = 0, vjust = .5),
legend.position = 'bottom')
#MKCox
#Getting survival times in ascending order
ordtr <- order(Surv_data$time)
Surv_data_ordered = Surv_data[ordtr,]
xx = Surv_data_ordered[,1:2]
del = Surv_data_ordered$status
yy = Surv_data_ordered$time
if (!del[1]) {
first1 <- which(del)[1]
xx <- xx[-(1:(first1 - 1)), ]
yy <- yy[-(1:(first1 - 1))]
del <- del[-(1:(first1 - 1))]
nn <- dim(Surv_data)[1] - first1 + 1
} else {
nn <- dim(Surv_data)[1]
}
rho0 <- .001*(Surv_data$status - seq(0, 10, length.out = dim(Surv_data)[1]))
klist <- list(kernelMatrix(rbfdot(1), as.matrix(xx)),
kernelMatrix(vanilladot(), as.matrix(xx)))
ktlist <- list(kernelMatrix(rbfdot(1), as.matrix(xx), as.matrix(Surv_data[,1:2])),
kernelMatrix(vanilladot(), as.matrix(xx), as.matrix(Surv_data[,1:2])))
kk <- simplify2array(klist)
kkk <- simplify2array(ktlist)
modmkl <- SurvMKL(y = Surv_data$time, del = Surv_data$status, K = kk, rho =  rho0, C = 0.005, lambda = 0.5, maxiter = 500, cri = .01)
mkl = predict_Surv(modmkl, kkk)
Surv_data$MKCox = mkl
plotlist[[6]] = ggplot(Surv_data, aes(x = x1, y = x2, color = MKCox)) + geom_point() + scale_color_gradient(low = 'blue', high = 'yellow') + labs(x = expression(x[1]), y = expression(x[2]), color = 'value', title = 'MKCox') + theme_bw() + theme(plot.title = element_text(hjust = .5), axis.title.y = element_text(angle = 0, vjust = .5), legend.position = 'bottom')
MKCox.con = survConcordance(Surv(time, status) ~ MKCox, Surv_data)$con
MKCox.con
ggarrange(plotlist = plotlist, ncol = 3, nrow = 2, common.legend = TRUE, legend = 'bottom')
library(RMKL)
library(ggplot2)
library(survival)
library(gbm)
library(randomForestSRC)
library(kernlab)
library(SurvELM)
library(ggpubr)
library(MASS)
n=1000
p=2
#beta=1
rho=0.75; #0.75
lambdaT=2  #baseline hazard =1/lambdaT
#lambdaC=50
#generate covaraince matrix  V=rho^|i-j|
#we can also generate R then use cholesky to intrdouce cor.
V=matrix(0,ncol=p,nrow=p)
for (i in 1:p) {
for (j in 1:p ){
V[i,j]=rho^abs(i-j)
}
}
X=mvrnorm(n=n,mu=rep(0,p),Sigma=V)
Beta=c(1,2)
f.true=drop(X %*% Beta)
logh.true=log(lambdaT*exp(drop(X %*% Beta)))
T=-(log(runif(n)))/(lambdaT*exp(drop(X %*% Beta)))
#C=-(log(runif(n)))/(lambdaC*exp(drop(X %*% CBeta)))
C=rexp(n,rate=1/10)
obs.time<- pmin(T,C)
status <- T<=C
table(status)
#force censor
fi<-obs.time>10
obs.time[fi]=10
status[fi]= FALSE
table(status)
Surv_data=data.frame(x1 = X[,1], x2 = X[,2], time = obs.time, status = status, f.true = f.true)
plotlist = list()
plotlist[[1]] = ggplot(Surv_data, aes(x = x1, y = x2, color = f.true)) + geom_point() +
scale_color_gradient(low = 'blue', high = 'yellow') +
labs(color = 'value', title = 'True',x = expression(x[1]), y = expression(x[2])) + theme_bw() +
theme(plot.title = element_text(hjust = .5), legend.position = 'bottom')
#Cox model
fit=coxph(Surv(Surv_data$time, Surv_data$status) ~ Surv_data$x1 + Surv_data$x2, method = "breslow")
fit2 <- step(fit, direction='both', k = log(dim(Surv_data)[1]))
cox_pred=predict(fit, as.data.frame(Surv_data[,1:2]))
summary(fit)$concordance[1]
Surv_data$Cox = cox_pred
plotlist[[2]] = ggplot(Surv_data, aes(x = x1, y = x2, color = Cox)) + geom_point() +
scale_color_gradient(low = 'blue', high = 'yellow') +
labs(x = expression(x[1]), y = expression(x[2]), color = 'value', title = 'Cox') + theme_bw() +
theme(plot.title = element_text(hjust = .5), legend.position = 'bottom')
#Gradient Boosting
gbm1 <- gbm(Surv(time, status) ~ x1 + x2,       # formula
data=Surv_data,                 # dataset
distribution="coxph",
n.trees=1000,              # number of trees
shrinkage=0.005,           # shrinkage or learning rate, 0.001 to 0.1 usually work
interaction.depth=1,       # 1: additive model, 2: two-way interactions, etc
bag.fraction = 0.5,        # subsampling fraction, 0.5 is probably best
train.fraction = 0.8,      # fraction of data for training, first train.fraction*N used for training
cv.folds = 5,              # do 5-fold cross-validation
verbose = F)           #  print progress
summary(gbm1)
best.iter <- gbm.perf(gbm1,method = "cv")
gpred2=predict(gbm1,Surv_data,best.iter)
Surv_data$GBM = gpred2
plotlist[[3]] = ggplot(Surv_data, aes(x = x1, y = x2, color = GBM)) + geom_point() +
scale_color_gradient(low = 'blue', high = 'yellow') +
labs(x = expression(x[1]), y = expression(x[2]), color = 'value', title = 'GBCox') +
theme_bw() + theme(plot.title = element_text(hjust = .5), axis.title.y = element_text(angle = 0, vjust = .5),
legend.position = 'bottom')
gbm.con = survConcordance(Surv(time, status) ~ GBM, Surv_data)$con
gbm.con
#Random Survival Forest
modrf <-  rfsrc(Surv(time, status) ~ x1 + x2, data = Surv_data, nsplit = 10)
prerf <- predict(modrf, Surv_data, outcome = 'test')$predicted.oob
Surv_data$RSF = prerf
plotlist[[4]] = ggplot(Surv_data, aes(x = x1, y = x2, color = RSF)) + geom_point() +
scale_color_gradient(low = 'blue', high = 'yellow') +
labs(x = expression(x[1]), y = expression(x[2]), color = 'value', title = 'RSF') + theme_bw() +
theme(plot.title = element_text(hjust = .5), axis.title.y = element_text(angle = 0, vjust = .5),
legend.position = 'bottom')
RSF.con = survConcordance(Surv(time, status) ~ RSF, Surv_data)$con
RSF.con
### Run ELM model
modelm <- ELMCox(Surv_data[,1:2], Surv(Surv_data$time, Surv_data$status))
ypreelm <- predict(modelm, Surv_data[,1:2])
Surv_data$ELM =  ypreelm
survConcordance(Surv(time, status) ~ ELM,data = Surv_data)$con
plotlist[[5]] = ggplot(Surv_data, aes(x = x1, y = x2, color = ELM)) + geom_point() +
scale_color_gradient(low = 'blue', high = 'yellow') +
labs(x = expression(x[1]), y = expression(x[2]), color = 'value', title = 'ELM') +
theme_bw() + theme(plot.title = element_text(hjust = .5), axis.title.y = element_text(angle = 0, vjust = .5),
legend.position = 'bottom')
#MKCox
#Getting survival times in ascending order
ordtr <- order(Surv_data$time)
Surv_data_ordered = Surv_data[ordtr,]
xx = Surv_data_ordered[,1:2]
del = Surv_data_ordered$status
yy = Surv_data_ordered$time
if (!del[1]) {
first1 <- which(del)[1]
xx <- xx[-(1:(first1 - 1)), ]
yy <- yy[-(1:(first1 - 1))]
del <- del[-(1:(first1 - 1))]
nn <- dim(Surv_data)[1] - first1 + 1
} else {
nn <- dim(Surv_data)[1]
}
rho0 <- .001*(Surv_data$status - seq(0, 10, length.out = dim(Surv_data)[1]))
klist <- list(kernelMatrix(rbfdot(1), as.matrix(xx)),
kernelMatrix(vanilladot(), as.matrix(xx)))
ktlist <- list(kernelMatrix(rbfdot(1), as.matrix(xx), as.matrix(Surv_data[,1:2])),
kernelMatrix(vanilladot(), as.matrix(xx), as.matrix(Surv_data[,1:2])))
kk <- simplify2array(klist)
kkk <- simplify2array(ktlist)
modmkl <- SurvMKL(y = Surv_data$time, del = Surv_data$status, K = kk, rho =  rho0, C = 0.005, lambda = 0.5, maxiter = 500, cri = .01)
mkl = predict_Surv(modmkl, kkk)
Surv_data$MKCox = mkl
plotlist[[6]] = ggplot(Surv_data, aes(x = x1, y = x2, color = MKCox)) + geom_point() + scale_color_gradient(low = 'blue', high = 'yellow') + labs(x = expression(x[1]), y = expression(x[2]), color = 'value', title = 'MKCox') + theme_bw() + theme(plot.title = element_text(hjust = .5), axis.title.y = element_text(angle = 0, vjust = .5), legend.position = 'bottom')
MKCox.con = survConcordance(Surv(time, status) ~ MKCox, Surv_data)$con
MKCox.con
ggarrange(plotlist = plotlist, ncol = 3, nrow = 2, common.legend = TRUE, legend = 'bottom')
ggarrange(plotlist = plotlist, ncol = 3, nrow = 2, common.legend = TRUE, legend = 'bottom')
ggarrange(plotlist = plotlist, ncol = 3, nrow = 2, common.legend = TRUE, legend = 'bottom')
pdf('Desktop/Surv_MKL/Paper/Survival_MKL_04212020/Linear.pdf')
ggarrange(plotlist = plotlist, ncol = 3, nrow = 2, common.legend = TRUE, legend = 'bottom')
dev.off()
pdf('Desktop/Surv_MKL/Paper/Survival_MKL_04212020/Linear.pdf', width = 15, height = 10 )
ggarrange(plotlist = plotlist, ncol = 3, nrow = 2, common.legend = TRUE, legend = 'bottom')
dev.off()
setwd('RMKL/')
usethis::use_data(Surv_data)
usethis::use_data(Surv_data, overwrite = TRUE)
devtools::document()
Surv_data = Surv_data[,-(6:10)]
head(Surv_data)
usethis::use_data(Surv_data, overwrite = TRUE)
devtools::document()
library(RMKL)
library(ggplot2)
library(survival)
library(gbm)
library(randomForestSRC)
library(kernlab)
library(MASS)
#####linear######
n=1000
p=2
#beta=1
rho=0.0; #0.75
lambdaT=2  #baseline hazard =1/lambdaT
#lambdaC=50
#generate covaraince matrix  V=rho^|i-j|
#we can also generate R then use cholesky to intrdouce cor.
V=matrix(0,ncol=p,nrow=p)
for (i in 1:p) {
for (j in 1:p ){
V[i,j]=rho^abs(i-j)
}
}
X=mvrnorm(n=n,mu=rep(0,p),Sigma=V)
Beta=c(1,2)
f.true = log(5.0)*exp(-(X[,1]^2 + 2*X[,2]^2)/(2*0.25)) #gaussian
logh.true=log(lambdaT*exp(f.true))
T=-(log(runif(n)))/(lambdaT*exp(f.true))
C=rexp(n,rate=1/10)
obs.time<- pmin(T,C)
status <- T<=C
table(status)
#force censor
fi<-obs.time>10
obs.time[fi]=10
status[fi]= FALSE
table(status)
Surv_data = data.frame(x1 = X[,1], x2 = X[,2], time = obs.time, status = status, f.true = f.true)
plotlist = list()
plotlist[[1]] = ggplot(Surv_data, aes(x = x1, y = x2, color = f.true)) + geom_point() + scale_color_gradient(low = 'blue', high = 'yellow') +
labs(color = 'value', title = 'True',x = expression(x[1]), y = expression(x[2])) + theme_bw() + theme(plot.title = element_text(hjust = .5), legend.position = 'right')
#Cox model
plotlist
library(RMKL)
library(ggplot2)
library(survival)
library(gbm)
library(randomForestSRC)
library(kernlab)
library(MASS)
#####linear######
n=1000
p=2
#beta=1
rho=0.0; #0.75
lambdaT=2  #baseline hazard =1/lambdaT
#lambdaC=50
#generate covaraince matrix  V=rho^|i-j|
#we can also generate R then use cholesky to intrdouce cor.
V=matrix(0,ncol=p,nrow=p)
for (i in 1:p) {
for (j in 1:p ){
V[i,j]=rho^abs(i-j)
}
}
X=mvrnorm(n=n,mu=rep(0,p),Sigma=V)
Beta=c(1,2)
f.true = log(5.0)*exp(-(X[,1]^2 + 2*X[,2]^2)/(2*0.25)) #gaussian
logh.true=log(lambdaT*exp(f.true))
T=-(log(runif(n)))/(lambdaT*exp(f.true))
C=rexp(n,rate=1/10)
obs.time<- pmin(T,C)
status <- T<=C
table(status)
#force censor
fi<-obs.time>10
obs.time[fi]=10
status[fi]= FALSE
table(status)
Surv_data = data.frame(x1 = X[,1], x2 = X[,2], time = obs.time, status = status, f.true = f.true)
plotlist = list()
plotlist[[1]] = ggplot(Surv_data, aes(x = x1, y = x2, color = f.true)) + geom_point() + scale_color_gradient(low = 'blue', high = 'yellow') +
labs(color = 'value', title = 'True',x = expression(x[1]), y = expression(x[2])) + theme_bw() + theme(plot.title = element_text(hjust = .5), legend.position = 'right')
#Cox model
fit=coxph(Surv(Surv_data$time, Surv_data$status) ~ Surv_data$x1 + Surv_data$x2, method = "breslow")
fit2 <- step(fit, direction='both', k = log(dim(Surv_data)[1]))
cox_pred=predict(fit, as.data.frame(Surv_data[,1:2]))
summary(fit)$concordance[1]
Surv_data$Cox = cox_pred
plotlist[[2]] = ggplot(Surv_data, aes(x = x1, y = x2, color = Cox)) + geom_point() + scale_color_gradient(low = 'blue', high = 'yellow') + labs(x = expression(x[1]), y = expression(x[2]), color = 'value', title = 'Cox') + theme_bw() + theme(plot.title = element_text(hjust = .5), legend.position = 'right')
#Gradient Boosting
gbm1 <- gbm(Surv(time, status) ~ x1 + x2,       # formula
data=Surv_data,                 # dataset
distribution="coxph",
n.trees=1000,              # number of trees
shrinkage=0.005,           # shrinkage or learning rate, 0.001 to 0.1 usually work
interaction.depth=1,       # 1: additive model, 2: two-way interactions, etc
bag.fraction = 0.5,        # subsampling fraction, 0.5 is probably best
train.fraction = 0.8,      # fraction of data for training, first train.fraction*N used for training
cv.folds = 5,              # do 5-fold cross-validation
verbose = F)           #  print progress
summary(gbm1)
best.iter <- gbm.perf(gbm1,method = "cv")
gpred2=predict(gbm1,Surv_data,best.iter)
Surv_data$GBM = gpred2
plotlist[[3]] = ggplot(Surv_data, aes(x = x1, y = x2, color = GBM)) + geom_point() + scale_color_gradient(low = 'blue', high = 'yellow') + labs(x = expression(x[1]), y = expression(x[2]), color = 'value', title = 'GBCox') + theme_bw() + theme(plot.title = element_text(hjust = .5), axis.title.y = element_text(angle = 0, vjust = .5), legend.position = 'bottom')
gbm.con = survConcordance(Surv(time, status) ~ GBM, Surv_data)$con
gbm.con
#Random Survival Forest
modrf <-  rfsrc(Surv(time, status) ~ x1 + x2, data = Surv_data, nsplit = 10)
prerf <- predict(modrf, Surv_data, outcome = 'test')$predicted.oob
Surv_data$RSF = prerf
plotlist[[4]] = ggplot(Surv_data, aes(x = x1, y = x2, color = RSF)) + geom_point() + scale_color_gradient(low = 'blue', high = 'yellow') + labs(x = expression(x[1]), y = expression(x[2]), color = 'value', title = 'RSF') + theme_bw() + theme(plot.title = element_text(hjust = .5), axis.title.y = element_text(angle = 0, vjust = .5), legend.position = 'bottom')
RSF.con = survConcordance(Surv(time, status) ~ RSF, Surv_data)$con
RSF.con
# Run ELM model
modelm <- ELMCox(Surv_data[,1:2], Surv(Surv_data$time, Surv_data$status))
ypreelm <- predict(modelm, Surv_data[,1:2])
Surv_data$ELM =  ypreelm
survConcordance(Surv(time, status) ~ ELM,data = Surv_data)$con
plotlist[[5]] = ggplot(Surv_data, aes(x = x1, y = x2, color = ELM)) + geom_point() +
scale_color_gradient(low = 'blue', high = 'yellow') +
labs(x = expression(x[1]), y = expression(x[2]), color = 'value', title = 'ELM') +
theme_bw() + theme(plot.title = element_text(hjust = .5), axis.title.y = element_text(angle = 0, vjust = .5),
legend.position = 'bottom')
#MKCox
#Getting survival times in ascending order
ordtr <- order(Surv_data$time)
Surv_data_ordered = Surv_data[ordtr,]
xx = Surv_data_ordered[,1:2]
del = Surv_data_ordered$status
yy = Surv_data_ordered$time
if (!del[1]) {
first1 <- which(del)[1]
xx <- xx[-(1:(first1 - 1)), ]
yy <- yy[-(1:(first1 - 1))]
del <- del[-(1:(first1 - 1))]
nn <- dim(Surv_data)[1] - first1 + 1
} else {
nn <- dim(Surv_data)[1]
}
rho0 <- .001*(Surv_data$status - seq(0, 10, length.out = dim(Surv_data)[1]))
klist <- list(kernelMatrix(rbfdot(1), as.matrix(xx)),
kernelMatrix(vanilladot(), as.matrix(xx)))
ktlist <- list(kernelMatrix(rbfdot(1), as.matrix(xx), as.matrix(Surv_data[,1:2])),
kernelMatrix(vanilladot(), as.matrix(xx), as.matrix(Surv_data[,1:2])))
kk <- simplify2array(klist)
kkk <- simplify2array(ktlist)
modmkl <- SurvMKL(y = Surv_data$time, del = Surv_data$status, K = kk, rho =  rho0, C = 0.005, lambda = 0.5, maxiter = 500, cri = .01)
mkl = predict_Surv(modmkl, kkk)
Surv_data$MKCox = mkl
plotlist[[6]] = ggplot(Surv_data, aes(x = x1, y = x2, color = MKCox)) + geom_point() + scale_color_gradient(low = 'blue', high = 'yellow') + labs(x = expression(x[1]), y = expression(x[2]), color = 'value', title = 'MKCox') + theme_bw() + theme(plot.title = element_text(hjust = .5), axis.title.y = element_text(angle = 0, vjust = .5), legend.position = 'bottom')
MKCox.con = survConcordance(Surv(time, status) ~ MKCox, Surv_data)$con
MKCox.con
ggpubr::ggarrange(plotlist = pplotlist, ncol = 3, nrow = 2 , common.legend = TRUE)
ggpubr::ggarrange(plotlist = plotlist, ncol = 3, nrow = 2 , common.legend = TRUE)
ggpubr::ggarrange(plotlist = plotlist, ncol = 3, nrow = 2 , common.legend = TRUE, legend = bottom)
ggpubr::ggarrange(plotlist = plotlist, ncol = 3, nrow = 2 , common.legend = TRUE, legend = 'bottom')
plotlist[[6]]
library(RMKL)
library(ggplot2)
library(survival)
library(gbm)
library(randomForestSRC)
library(kernlab)
library(MASS)
#####linear######
n=1000
p=2
#beta=1
rho=0.50; #0.75
lambdaT=2  #baseline hazard =1/lambdaT
#lambdaC=50
#generate covaraince matrix  V=rho^|i-j|
#we can also generate R then use cholesky to intrdouce cor.
V=matrix(0,ncol=p,nrow=p)
for (i in 1:p) {
for (j in 1:p ){
V[i,j]=rho^abs(i-j)
}
}
X=mvrnorm(n=n,mu=rep(0,p),Sigma=V)
Beta=c(1,2)
f.true = log(5.0)*exp(-(X[,1]^2 + 2*X[,2]^2)/(2*0.25)) #gaussian
logh.true=log(lambdaT*exp(f.true))
T=-(log(runif(n)))/(lambdaT*exp(f.true))
C=rexp(n,rate=1/10)
obs.time<- pmin(T,C)
status <- T<=C
table(status)
#force censor
fi<-obs.time>10
obs.time[fi]=10
status[fi]= FALSE
table(status)
Surv_data = data.frame(x1 = X[,1], x2 = X[,2], time = obs.time, status = status, f.true = f.true)
plotlist = list()
plotlist[[1]] = ggplot(Surv_data, aes(x = x1, y = x2, color = f.true)) + geom_point() + scale_color_gradient(low = 'blue', high = 'yellow') +
labs(color = 'value', title = 'True',x = expression(x[1]), y = expression(x[2])) + theme_bw() + theme(plot.title = element_text(hjust = .5), legend.position = 'right')
#Cox model
fit=coxph(Surv(Surv_data$time, Surv_data$status) ~ Surv_data$x1 + Surv_data$x2, method = "breslow")
fit2 <- step(fit, direction='both', k = log(dim(Surv_data)[1]))
cox_pred=predict(fit, as.data.frame(Surv_data[,1:2]))
summary(fit)$concordance[1]
Surv_data$Cox = cox_pred
plotlist[[2]] = ggplot(Surv_data, aes(x = x1, y = x2, color = Cox)) + geom_point() + scale_color_gradient(low = 'blue', high = 'yellow') + labs(x = expression(x[1]), y = expression(x[2]), color = 'value', title = 'Cox') + theme_bw() + theme(plot.title = element_text(hjust = .5), legend.position = 'right')
#Gradient Boosting
gbm1 <- gbm(Surv(time, status) ~ x1 + x2,       # formula
data=Surv_data,                 # dataset
distribution="coxph",
n.trees=1000,              # number of trees
shrinkage=0.005,           # shrinkage or learning rate, 0.001 to 0.1 usually work
interaction.depth=1,       # 1: additive model, 2: two-way interactions, etc
bag.fraction = 0.5,        # subsampling fraction, 0.5 is probably best
train.fraction = 0.8,      # fraction of data for training, first train.fraction*N used for training
cv.folds = 5,              # do 5-fold cross-validation
verbose = F)           #  print progress
summary(gbm1)
best.iter <- gbm.perf(gbm1,method = "cv")
gpred2=predict(gbm1,Surv_data,best.iter)
Surv_data$GBM = gpred2
plotlist[[3]] = ggplot(Surv_data, aes(x = x1, y = x2, color = GBM)) + geom_point() + scale_color_gradient(low = 'blue', high = 'yellow') + labs(x = expression(x[1]), y = expression(x[2]), color = 'value', title = 'GBCox') + theme_bw() + theme(plot.title = element_text(hjust = .5), axis.title.y = element_text(angle = 0, vjust = .5), legend.position = 'bottom')
gbm.con = survConcordance(Surv(time, status) ~ GBM, Surv_data)$con
gbm.con
#Random Survival Forest
modrf <-  rfsrc(Surv(time, status) ~ x1 + x2, data = Surv_data, nsplit = 10)
prerf <- predict(modrf, Surv_data, outcome = 'test')$predicted.oob
Surv_data$RSF = prerf
plotlist[[4]] = ggplot(Surv_data, aes(x = x1, y = x2, color = RSF)) + geom_point() + scale_color_gradient(low = 'blue', high = 'yellow') + labs(x = expression(x[1]), y = expression(x[2]), color = 'value', title = 'RSF') + theme_bw() + theme(plot.title = element_text(hjust = .5), axis.title.y = element_text(angle = 0, vjust = .5), legend.position = 'bottom')
RSF.con = survConcordance(Surv(time, status) ~ RSF, Surv_data)$con
RSF.con
# Run ELM model
modelm <- ELMCox(Surv_data[,1:2], Surv(Surv_data$time, Surv_data$status))
ypreelm <- predict(modelm, Surv_data[,1:2])
Surv_data$ELM =  ypreelm
survConcordance(Surv(time, status) ~ ELM,data = Surv_data)$con
plotlist[[5]] = ggplot(Surv_data, aes(x = x1, y = x2, color = ELM)) + geom_point() +
scale_color_gradient(low = 'blue', high = 'yellow') +
labs(x = expression(x[1]), y = expression(x[2]), color = 'value', title = 'ELM') +
theme_bw() + theme(plot.title = element_text(hjust = .5), axis.title.y = element_text(angle = 0, vjust = .5),
legend.position = 'bottom')
#MKCox
#Getting survival times in ascending order
ordtr <- order(Surv_data$time)
Surv_data_ordered = Surv_data[ordtr,]
xx = Surv_data_ordered[,1:2]
del = Surv_data_ordered$status
yy = Surv_data_ordered$time
if (!del[1]) {
first1 <- which(del)[1]
xx <- xx[-(1:(first1 - 1)), ]
yy <- yy[-(1:(first1 - 1))]
del <- del[-(1:(first1 - 1))]
nn <- dim(Surv_data)[1] - first1 + 1
} else {
nn <- dim(Surv_data)[1]
}
rho0 <- .001*(Surv_data$status - seq(0, 10, length.out = dim(Surv_data)[1]))
klist <- list(kernelMatrix(rbfdot(1), as.matrix(xx)),
kernelMatrix(vanilladot(), as.matrix(xx)))
ktlist <- list(kernelMatrix(rbfdot(1), as.matrix(xx), as.matrix(Surv_data[,1:2])),
kernelMatrix(vanilladot(), as.matrix(xx), as.matrix(Surv_data[,1:2])))
kk <- simplify2array(klist)
kkk <- simplify2array(ktlist)
modmkl <- SurvMKL(y = Surv_data$time, del = Surv_data$status, K = kk, rho =  rho0, C = 0.005, lambda = 0.5, maxiter = 500, cri = .01)
mkl = predict_Surv(modmkl, kkk)
Surv_data$MKCox = mkl
plotlist[[6]] = ggplot(Surv_data, aes(x = x1, y = x2, color = MKCox)) + geom_point() + scale_color_gradient(low = 'blue', high = 'yellow') + labs(x = expression(x[1]), y = expression(x[2]), color = 'value', title = 'MKCox') + theme_bw() + theme(plot.title = element_text(hjust = .5), axis.title.y = element_text(angle = 0, vjust = .5), legend.position = 'bottom')
MKCox.con = survConcordance(Surv(time, status) ~ MKCox, Surv_data)$con
MKCox.con
ggpubr::ggarrange(plotlist = plotlist, ncol = 3, nrow = 2 , common.legend = TRUE, legend = 'bottom')
ggpubr::ggarrange(plotlist = plotlist, ncol = 3, nrow = 2 , common.legend = TRUE, legend = 'bottom')
ggpubr::ggarrange(plotlist = plotlist, ncol = 3, nrow = 2 , common.legend = TRUE, legend = 'bottom')
pdf('~/Desktop/Surv_MKL/Paper/Survival_MKL_04212020/nonlinear.pdf')
ggpubr::ggarrange(plotlist = plotlist, ncol = 3, nrow = 2 , common.legend = TRUE, legend = 'bottom')
dev.off()
pdf('~/Desktop/Surv_MKL/Paper/Survival_MKL_04212020/nonlinear.pdf', width = 15, height = 10)
ggpubr::ggarrange(plotlist = plotlist, ncol = 3, nrow = 2 , common.legend = TRUE, legend = 'bottom')
dev.off()
